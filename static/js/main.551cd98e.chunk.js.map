{"version":3,"sources":["util/keys.js","Components/POI/POI.js","Components/Weather/Weather.js","Components/SearchResults/SearchResults.js","Components/SearchBar/SearchBar.js","util/places.js","App.js","serviceWorker.js","index.js"],"names":["require","config","Keys","apiKey","process","GOOGLEPLACESAPIKEY","weatherAPIKey","OPENWEATHERAPIKEY","appId","APPID","appCode","APPCODE","locationiqKey","LOCATIONIQKEY","pixabayKey","PIXABAYKEY","POI","decider","className","placesAPIKey","poi","this","props","result","hoursChecker","opening_hours","open_now","photoId","photos","photo_reference","style","backgroundImage","name","formatted_address","isOpen","React","Component","defaultProps","hours","Weather","icon","forecast","description","Math","round","temperature","feel","src","generateIcon","weatherForecast","alt","generateForecast","SearchResults","hasOwnProperty","searchResults","map","key","id","renderWeather","renderPOI","SearchBar","state","term","location","handleTermChange","bind","handleLocationChange","handleClick","e","onSearch","setState","target","value","placeholder","onChange","width","onClick","cors","places","searchTerm","url","fetch","method","headers","Accept","body","JSON","stringify","service","then","response","json","jsonResponse","results","place","main","temp","feels_like","condition","weather","error","message","App","mapImage","poiList","search","pois","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.551cd98e.chunk.js","sourcesContent":["require(\"dotenv\").config();\r\n\r\nexport const Keys = {\r\n  apiKey: process.env.GOOGLEPLACESAPIKEY,\r\n  weatherAPIKey: process.env.OPENWEATHERAPIKEY,\r\n  appId: process.env.APPID,\r\n  appCode: process.env.APPCODE,\r\n  locationiqKey: process.env.LOCATIONIQKEY,\r\n  pixabayKey: process.env.PIXABAYKEY\r\n};\r\n","import React from \"react\";\r\nimport \"./POI.css\";\r\nimport { Keys } from \"../../util/keys\";\r\n\r\nexport class POI extends React.Component {\r\n  // this handles displaying if the business is open/closed or we dont have that info\r\n\r\n  isOpen(decider) {\r\n    if (decider) {\r\n      if (decider === \"unknown\") {\r\n        return <span className=\"unknown\">Unknown</span>;\r\n      }\r\n      return <span className=\"open\">Open</span>;\r\n    } else {\r\n      return <span>Closed</span>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let apiKey = Keys.placesAPIKey;\r\n    let poi = this.props.result;\r\n    let hoursChecker = poi.opening_hours\r\n      ? poi.opening_hours.open_now\r\n      : \"unknown\";\r\n    let photoId = poi.photos ? poi.photos[0].photo_reference : false;\r\n    let photoURL = photoId\r\n      ? `url(https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photoId}&key=${apiKey})`\r\n      : \"\";\r\n\r\n    return (\r\n      <div>\r\n        <a className=\"card\">\r\n          <div\r\n            className=\"thumb\"\r\n            style={{\r\n              backgroundImage: \"url(https://picsum.photos/400.jpg)\"\r\n            }}\r\n          ></div>\r\n          <article>\r\n            <h1>{poi.name}</h1>\r\n            {poi.formatted_address}\r\n            <br />\r\n            {this.isOpen(hoursChecker)}\r\n          </article>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// set default values for the POI Component props.\r\nPOI.defaultProps = {\r\n  isOpen: \"Unknown\",\r\n  hours: \"No business hours information available.\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./Weather.css\";\r\n\r\nclass Weather extends Component {\r\n  generateIcon(icon) {\r\n    //return `url(http://openweathermap.org/img/wn/${icon}.png)`;\r\n    return `https://openweathermap.org/img/wn/${icon}.png`;\r\n  }\r\n\r\n  generateForecast(forecast) {\r\n    return `Expect ${forecast.description} and temperatures of ${Math.round(\r\n      forecast.temperature - 273\r\n    )}°C with a ${Math.round(forecast.feel - 273)}°C real feel`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"featured-item\">\r\n        <div className=\"weathercard\">\r\n          <div className=\"icon\">\r\n            <img\r\n              src={this.generateIcon(this.props.weatherForecast.icon)}\r\n              className=\"iconimg\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n\r\n          <h1>{this.generateForecast(this.props.weatherForecast)}</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { POI } from \"../POI/POI\";\r\nimport Weather from \"../Weather/Weather\";\r\nimport \"./SearchResults.css\";\r\n\r\nexport class SearchResults extends React.Component {\r\n  renderWeather() {\r\n    if (this.props.weatherForecast.hasOwnProperty(\"condition\")) {\r\n      return <Weather weatherForecast={this.props.weatherForecast} />;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  renderPOI() {\r\n    return this.props.searchResults.map(result => {\r\n      return <POI key={\"poi_\" + result.id} result={result} />;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"productlistarea\">\r\n        {this.renderWeather()}\r\n        {this.renderPOI()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nexport class SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\"\r\n    };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.props.onSearch(this.state.term, this.state.location);\r\n  }\r\n\r\n  handleTermChange(e) {\r\n    this.setState({ term: e.target.value });\r\n  }\r\n\r\n  handleLocationChange(e) {\r\n    this.setState({ location: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            placeholder=\"What are you looking for?\"\r\n            className=\"field\"\r\n            onChange={this.handleTermChange}\r\n          />\r\n          <input\r\n            placeholder=\"Where?\"\r\n            className=\"field\"\r\n            style={{ width: 30 + \"%\" }}\r\n            onChange={this.handleLocationChange}\r\n          />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleClick}>Find</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","let cors = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nexport const places = {\r\n  search(term, location) {\r\n    let searchTerm;\r\n    term && location\r\n      ? (searchTerm = term + \" \" + location)\r\n      : (searchTerm = term);\r\n    let url = `${cors}https://pumbar0ym5.execute-api.us-east-1.amazonaws.com/default/React_Middle_Man`;\r\n\r\n    return fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ term: searchTerm, service: \"places\" })\r\n    })\r\n      .then(response => response.json())\r\n      .then(jsonResponse => {\r\n        return jsonResponse.results;\r\n      });\r\n  },\r\n\r\n  getForcast(location) {\r\n    let url = `${cors}https://pumbar0ym5.execute-api.us-east-1.amazonaws.com/default/React_Middle_Man`;\r\n\r\n    return fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ place: location, service: \"weather\" })\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(jsonResponse => {\r\n        return jsonResponse.hasOwnProperty(\"main\")\r\n          ? {\r\n              temperature: jsonResponse.main.temp,\r\n              feel: jsonResponse.main.feels_like,\r\n              condition: jsonResponse.weather[0].main,\r\n              description: jsonResponse.weather[0].description,\r\n              icon: jsonResponse.weather[0].icon\r\n            }\r\n          : { error: jsonResponse.message };\r\n      });\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { SearchResults } from \"./Components/SearchResults/SearchResults\";\r\nimport { SearchBar } from \"./Components/SearchBar/SearchBar\";\r\nimport { places } from \"./util/places\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mapImage: \"\",\r\n      poiList: [],\r\n      weather: {}\r\n    };\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search(term, location) {\r\n    //here.mapImageSearch( location).then( image => {console.log(image)});\r\n    //here.search(term, location).then(pois =>\r\n    //console.log(pois));\r\n    //this.setState({poiList: pois}));\r\n    // get list of pois and get a small map image\r\n\r\n    places\r\n      .search(term, location)\r\n      .then(pois => this.setState({ poiList: pois }));\r\n\r\n    places\r\n      .getForcast(location)\r\n      .then(weather => this.setState({ weather: weather }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchBar onSearch={this.search} />\r\n        <SearchResults\r\n          searchResults={this.state.poiList}\r\n          weatherForecast={this.state.weather}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}